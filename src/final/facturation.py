from final.taches import TacheSimple, Projet

class CalculateurFacturation:

    # FIXME: La signature de la fonction est confuse, soit un projet avec
    # plusieurs t√¢ches, soit une seule t√¢che simple. Ceci ne devrait pas √™tre
    # n√©cessaire si le patron Composite √©tait utilis√©.

    # FIXME: Cette signature ne permet pas des projets compos√©s de sous-projets
    # et t√¢ches. Ceci ne devrait pas √™tre n√©cessaire si le patron Composite
    # √©tait utilis√©.
    def afficher_facturation(self, projet: Projet | None, taches: TacheSimple | list[TacheSimple]) -> None:
        """
        Affiche la facturation pour un projet avec ses t√¢ches ou une t√¢che simple.
        """
        # FIXME: Ce test ne devrait pas √™tre n√©cessaire si le patron Composite √©tait utilis√©.
        if projet:
            if not isinstance(taches, list):
                raise ValueError("Une liste de t√¢ches doit √™tre fournie si un projet est sp√©cifi√©")
            nom_tache = projet.nom
        else:
            if not isinstance(taches, TacheSimple):
                raise ValueError("Une seule t√¢che doit √™tre fournie si aucun projet n'est sp√©cifi√©")
            nom_tache = taches.nom
        print(f"üìä Facturation pour {nom_tache}")

        temps_total = 0
        cout_total = 0.0
        # FIXME: Ce test ne devrait pas √™tre n√©cessaire si le patron Composite √©tait utilis√©.
        if projet:
            temps_total += projet.temps_total()
            cout_total += projet.cout_total()
            for tache in taches: # type: ignore
                temps_total += tache.temps_total()
                cout_total += tache.cout_total()
        else:
            temps_total += taches.temps_total() # type: ignore
            cout_total += taches.cout_total() # type: ignore
        
        print(f"   ‚è≥ Nb heures: {temps_total:.2f} heures")
        print(f"   üí∞ Co√ªt total: {cout_total:.2f}$")
